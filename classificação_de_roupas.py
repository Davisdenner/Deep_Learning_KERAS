# -*- coding: utf-8 -*-
"""Classificação_de_roupas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SIkZubNttyGgMUEXjGSeEK6UkDStjYos

##Imports
"""

import tensorflow
from tensorflow import keras
import matplotlib.pyplot as plt
import numpy as np

"""##Carregando o dataset"""

dataset = keras.datasets.fashion_mnist
((imagens_treino, identificacoes_treino), (imagens_teste, identificacoes_teste)) = dataset.load_data()

"""##Explorando os dados"""

len(imagens_treino)
imagens_treino.shape
imagens_teste.shape
len(identificacoes_teste)
identificacoes_treino.min()
identificacoes_treino.max()

"""##Exibição dos dados"""

total_de_classificacoes = 10
nome_de_classificacoes = ['Camiseta', 'Calça', 'Pullover', 'Vestido', 'Casaco', 'Sandália', 'Camisa', 'Tênis', 'Bota', 'Bota de Couro']

#plt.imshow(imagens_treino[0])
#plt.title(identificacoes_treino[0])

'''
for imagem in range (10):
    plt.subplot(2, 5, imagem+1)
    plt.imshow(imagens_treino[imagem])
    plt.title(nome_de_classificacoes[identificacoes_treino[imagem]])
'''

plt.imshow(imagens_treino[0])
plt.colorbar()

"""##Normalização"""

imagens_treino = imagens_treino/float(255)

modelo = keras.Sequential([keras.layers.Flatten(input_shape = (28,28)),
                          keras.layers.Dense(256, activation = tensorflow.nn.relu),
                          keras.layers.Dropout(0.2),
                          keras.layers.Dense(10, activation = tensorflow.nn.softmax)])

modelo.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics= ['accuracy'])

historico = modelo.fit(imagens_treino,identificacoes_treino, epochs=30, validation_split = 0.2)

from tensorflow.keras.models import load_model

modelo.save('modelo_epochs5_nos3.h5')

modelo_salvo = load_model('modelo_epochs5_nos3.h5', custom_objects={'softmax_v2': tensorflow.nn.softmax})

"""#Gráfico - Ácuracia por épocas"""

historico.history['accuracy']

plt.plot( historico.history['accuracy'])
plt.plot( historico.history['val_accuracy'])
plt.title('Ácuracia por épocas')
plt.xlabel('Épocas')
plt.ylabel('Acuracia')
plt.legend(['Treino', 'Validação'])

"""##Gráfico - Perdas por épocas"""

plt.plot( historico.history['loss'])
plt.plot( historico.history['val_loss'])
plt.title('Perda por épocas')
plt.xlabel('épocas')
plt.ylabel('perda')
plt.legend(['Treino', 'Validação'])



"""##Testando o modelo

"""

teste=modelo.predict(imagens_teste)
print('Resultado do teste: ', np.argmax(teste[0]))
print('Número da imagem: ', identificacoes_teste[0])

"""##Testando o modelo salvo"""

teste_modelo_salvo=modelo_salvo.predict(imagens_teste)
print('Resultado do teste: ', np.argmax(teste_modelo_salvo[0]))
print('Número da imagem: ', identificacoes_teste[0])

"""##Avaliação e validação do modelo"""

perda_teste, acuracia_teste = modelo.evaluate(imagens_teste, identificacoes_teste)
print('Perdas do teste: ', perda_teste)
print('Ácuracia do teste: ', acuracia_teste)



